{
  "name": "cuovare",
  "displayName": "Cuovare - Advanced AI Coding Assistant",
  "description": "The most beautiful and advanced AI coding assistant with multi-provider support, MCP integration, and intelligent codebase understanding",
  "version": "0.9.1",
  "publisher": "cuovare",
  "icon": "resources/icon.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Kynlos/cuovare-continued.git"
  },
  "engines": {
    "vscode": "^1.100.0"
  },
  "categories": [
    "AI",
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "ai",
    "assistant",
    "coding",
    "copilot",
    "openai",
    "anthropic",
    "mcp"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cuovare.openChat",
        "title": "Open Cuovare Chat",
        "category": "Cuovare",
        "icon": "$(comment-discussion)"
      },
      {
        "command": "cuovare.openSettings",
        "title": "Open Settings",
        "category": "Cuovare",
        "icon": "$(settings-gear)"
      },
      {
        "command": "cuovare.explainCode",
        "title": "Explain Selected Code",
        "category": "Cuovare",
        "icon": "$(lightbulb)"
      },
      {
        "command": "cuovare.generateCode",
        "title": "Generate Code",
        "category": "Cuovare",
        "icon": "$(wand)"
      },
      {
        "command": "cuovare.reviewCode",
        "title": "Review Code",
        "category": "Cuovare",
        "icon": "$(search-view-icon)"
      },
      {
        "command": "cuovare.debugMCP",
        "title": "Debug MCP Servers",
        "category": "Cuovare",
        "icon": "$(debug)"
      },
      {
        "command": "cuovare.enableAgentMode",
        "title": "Enable Agent Mode",
        "category": "Cuovare",
        "icon": "$(robot)"
      },
      {
        "command": "cuovare.disableAgentMode",
        "title": "Disable Agent Mode",
        "category": "Cuovare",
        "icon": "$(circle-slash)"
      },
      {
        "command": "cuovare.runCodeReview",
        "title": "Run AI Code Review",
        "category": "Cuovare",
        "icon": "$(search-view-icon)"
      },
      {
        "command": "cuovare.generateTests",
        "title": "Generate Unit Tests",
        "category": "Cuovare",
        "icon": "$(beaker)"
      },
      {
        "command": "cuovare.analyzePerformance",
        "title": "Analyze Performance",
        "category": "Cuovare",
        "icon": "$(pulse)"
      },
      {
        "command": "cuovare.scanSecurity",
        "title": "Security Scan",
        "category": "Cuovare",
        "icon": "$(shield)"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cuovare",
          "title": "Cuovare",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "cuovare": [
        {
          "type": "webview",
          "id": "cuovare.chatView",
          "name": "AI Assistant",
          "when": "true"
        }
      ]
    },
    "menus": {
      "editor/context": [
        {
          "command": "cuovare.explainCode",
          "when": "editorHasSelection",
          "group": "cuovare@1"
        },
        {
          "command": "cuovare.generateCode",
          "group": "cuovare@2"
        },
        {
          "command": "cuovare.reviewCode",
          "when": "editorHasSelection",
          "group": "cuovare@3"
        },
        {
          "command": "cuovare.runCodeReview",
          "group": "cuovare@4"
        },
        {
          "command": "cuovare.generateTests",
          "when": "editorHasSelection",
          "group": "cuovare@5"
        },
        {
          "command": "cuovare.analyzePerformance",
          "group": "cuovare@6"
        },
        {
          "command": "cuovare.scanSecurity",
          "group": "cuovare@7"
        }
      ],
      "view/title": [
        {
          "command": "cuovare.openSettings",
          "when": "view == cuovare.chatView",
          "group": "navigation"
        }
      ]
    },
    "configuration": {
      "title": "Cuovare",
      "properties": {
        "cuovare.ai.defaultProvider": {
          "type": "string",
          "enum": [
            "openai",
            "anthropic",
            "groq",
            "grok",
            "google",
            "ollama",
            "local",
            "openrouter"
          ],
          "default": "openai",
          "markdownDescription": "**Default AI Provider**\n\nChoose your preferred AI provider. Will auto-select first available if this provider has no API key configured.",
          "order": 1
        },
        "cuovare.ai.selectedModels": {
          "type": "object",
          "markdownDescription": "**Selected Models**\n\nChoose specific models for each AI provider.",
          "properties": {
            "openai": {
              "type": "string",
              "description": "Selected OpenAI model (e.g., gpt-4, gpt-3.5-turbo)"
            },
            "anthropic": {
              "type": "string",
              "description": "Selected Anthropic model (e.g., claude-3-sonnet, claude-3-haiku)"
            },
            "groq": {
              "type": "string",
              "description": "Selected Groq model (e.g., llama-3.1-70b, mixtral-8x7b)"
            },
            "grok": {
              "type": "string",
              "description": "Selected xAI Grok model"
            },
            "google": {
              "type": "string",
              "description": "Selected Google AI model (e.g., gemini-pro, gemini-1.5-pro)"
            },
            "ollama": {
              "type": "string",
              "description": "Selected Ollama model (e.g., llama3, codellama)"
            },
            "local": {
              "type": "string",
              "description": "Selected Local/Custom model endpoint"
            },
            "openrouter": {
              "type": "string",
              "description": "Selected OpenRouter model"
            }
          },
          "default": {},
          "order": 2
        },
        "cuovare.ai.customModels": {
          "type": "object",
          "markdownDescription": "**Custom Models**\n\nAdd custom models for each provider that aren't in the default list.",
          "properties": {
            "openai": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom OpenAI-compatible models"
            },
            "anthropic": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom Anthropic models"
            },
            "groq": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom Groq models"
            },
            "grok": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom Grok models"
            },
            "openrouter": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Custom OpenRouter models"
            }
          },
          "default": {},
          "order": 3
        },
        "cuovare.ai.responseSettings": {
          "type": "object",
          "markdownDescription": "**Response Settings**\n\nControl how AI responses are generated and displayed.",
          "properties": {
            "temperature": {
              "type": "number",
              "default": 0.7,
              "minimum": 0,
              "maximum": 2,
              "description": "Controls randomness in responses (0 = deterministic, 2 = very creative)"
            },
            "maxTokens": {
              "type": "number",
              "default": 4000,
              "minimum": 100,
              "maximum": 32000,
              "description": "Maximum tokens in AI responses"
            },
            "streamResponses": {
              "type": "boolean",
              "default": true,
              "description": "Stream responses in real-time for better UX"
            }
          },
          "default": {},
          "order": 4
        },
        "cuovare.agent.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Enable Agent Mode**\n\nAllow AI to autonomously execute tasks using the 23 available tools.",
          "order": 10
        },
        "cuovare.agent.autoExecuteTools": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Auto-Execute Tools**\n\nAutomatically run tools when AI requests them (disable for manual approval).",
          "order": 11
        },
        "cuovare.agent.maxConcurrentToolExecutions": {
          "type": "number",
          "default": 5,
          "minimum": 1,
          "maximum": 10,
          "markdownDescription": "**Max Concurrent Tools**\n\nMaximum number of tools that can execute simultaneously.",
          "order": 12
        },
        "cuovare.agent.toolExecutionTimeout": {
          "type": "number",
          "default": 30000,
          "minimum": 5000,
          "maximum": 120000,
          "markdownDescription": "**Tool Timeout**\n\nTimeout for tool execution in milliseconds.",
          "order": 13
        },
        "cuovare.agent.enabledTools": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "api",
              "database",
              "debugging",
              "deployment",
              "package",
              "performance",
              "security",
              "webscraping",
              "fileOperation",
              "git",
              "multiFileEditing",
              "terminal",
              "search",
              "documentation",
              "testing",
              "refactoring",
              "advancedCodeReview",
              "autoTestGeneration",
              "codeRefactoring",
              "realTimeErrorDetection",
              "performanceOptimization",
              "securityVulnerability",
              "codeQualityMetrics",
              "smartImportManagement"
            ]
          },
          "default": [
            "api",
            "database",
            "debugging",
            "deployment",
            "package",
            "performance",
            "security",
            "webscraping",
            "fileOperation",
            "git",
            "multiFileEditing",
            "terminal",
            "search",
            "documentation",
            "testing",
            "refactoring",
            "advancedCodeReview",
            "autoTestGeneration",
            "codeRefactoring",
            "realTimeErrorDetection",
            "performanceOptimization",
            "securityVulnerability",
            "codeQualityMetrics",
            "smartImportManagement"
          ],
          "markdownDescription": "**Enabled Tools**\n\nSelect which of the 23 agent tools are available for AI to use.",
          "uniqueItems": true,
          "order": 14
        },
        "cuovare.agent.safetyControls": {
          "type": "object",
          "markdownDescription": "**Safety Controls**\n\nSafety settings for agent tool execution.",
          "properties": {
            "requireConfirmation": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "deployment",
                "database",
                "terminal"
              ],
              "description": "Tools that require user confirmation before execution"
            },
            "blockedCommands": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "rm -rf",
                "del /f",
                "format",
                "shutdown"
              ],
              "description": "Terminal commands that are blocked from execution"
            },
            "maxFileSize": {
              "type": "number",
              "default": 1048576,
              "description": "Maximum file size (bytes) that tools can modify"
            }
          },
          "default": {},
          "order": 15
        },
        "cuovare.context.maxFiles": {
          "type": "number",
          "default": 50,
          "minimum": 1,
          "maximum": 200,
          "markdownDescription": "**Max Context Files**\n\nMaximum number of files to include in context for AI understanding.",
          "order": 20
        },
        "cuovare.context.autoIncludeOpenFiles": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Auto-Include Open Files**\n\nAutomatically include currently open files in context.",
          "order": 21
        },
        "cuovare.context.intelligentFiltering": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Intelligent Filtering**\n\nUse semantic search to include only relevant files in context.",
          "order": 22
        },
        "cuovare.context.excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "node_modules/**",
            ".git/**",
            "dist/**",
            "build/**",
            "*.min.js"
          ],
          "markdownDescription": "**Exclude Patterns**\n\nFile patterns to exclude from context (glob patterns).",
          "order": 23
        },
        "cuovare.context.maxTokensPerFile": {
          "type": "number",
          "default": 2000,
          "minimum": 100,
          "maximum": 10000,
          "markdownDescription": "**Max Tokens Per File**\n\nMaximum tokens to include from each file in context.",
          "order": 24
        },
        "cuovare.ui.theme": {
          "type": "string",
          "enum": [
            "auto",
            "light",
            "dark"
          ],
          "default": "auto",
          "markdownDescription": "**UI Theme**\n\nChoose the chat interface theme.",
          "order": 30
        },
        "cuovare.ui.enableSyntaxHighlighting": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Syntax Highlighting**\n\nEnable syntax highlighting in code blocks.",
          "order": 31
        },
        "cuovare.ui.showToolExecutionDetails": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Show Tool Details**\n\nShow detailed information when tools are executed.",
          "order": 32
        },
        "cuovare.ui.autoScroll": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Auto-Scroll**\n\nAutomatically scroll to new messages in chat.",
          "order": 33
        },
        "cuovare.ui.compactMode": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**Compact Mode**\n\nUse a more compact layout for the chat interface.",
          "order": 34
        },
        "cuovare.mcp.enabled": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Enable MCP**\n\nEnable Model Context Protocol support for external tools.",
          "order": 40
        },
        "cuovare.mcp.autoStart": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Auto-Start Servers**\n\nAutomatically start MCP servers when extension loads.",
          "order": 41
        },
        "cuovare.mcpServers": {
          "type": "array",
          "markdownDescription": "**MCP Servers**\n\nConfigure Model Context Protocol servers for additional tool integration.",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Unique name for the MCP server"
              },
              "command": {
                "type": "string",
                "description": "Command to start the MCP server"
              },
              "args": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Arguments to pass to the command"
              },
              "env": {
                "type": "object",
                "description": "Environment variables for the server process",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "cwd": {
                "type": "string",
                "description": "Working directory for the server process"
              },
              "autoReconnect": {
                "type": "boolean",
                "default": true,
                "description": "Automatically reconnect if the server disconnects"
              }
            },
            "required": [
              "name",
              "command"
            ]
          },
          "default": [],
          "order": 42
        },
        "cuovare.advanced.enableDebugLogging": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**Debug Logging**\n\nEnable detailed debug logging (may affect performance).",
          "order": 50
        },
        "cuovare.advanced.cacheResponses": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "**Cache Responses**\n\nCache AI responses to improve performance for repeated queries.",
          "order": 51
        },
        "cuovare.advanced.telemetryEnabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "**Telemetry**\n\nSend anonymous usage data to help improve Cuovare (completely optional).",
          "order": 52
        },
        "cuovare.internal.chatSessions": {
          "type": "array",
          "markdownDescription": "**Chat Sessions (Internal)**\n\nSaved chat sessions - managed automatically, do not modify.",
          "default": [],
          "order": 100
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "pnpm run esbuild-base -- --minify",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "esbuild-base": "node build.js",
    "esbuild": "pnpm run esbuild-base -- --sourcemap",
    "esbuild-watch": "pnpm run esbuild-base -- --sourcemap --watch",
    "pretest": "pnpm run compile && pnpm run lint",
    "lint": "eslint src",
    "lint:fix": "eslint src --fix",
    "format": "prettier --write src/**/*.ts test/**/*.ts",
    "typecheck": "tsc --noEmit",
    "test": "vscode-test",
    "unit-tests": "node test/runUnitTests.js",
    "test:v070": "node test/validateV070Features.js",
    "test:v080": "node test/validateV080Features.js",
    "test:v090": "node test/validateV090Features.js",
    "test:agent": "node test/validateAgentMode.js",
    "test:all": "pnpm run unit-tests && pnpm run test:v070 && pnpm run test:v080 && pnpm run test:v090 && pnpm run test:agent",
    "test:watch": "nodemon --exec 'pnpm run unit-tests' --watch src --watch test --ext ts",
    "test:coverage": "nyc pnpm run unit-tests",
    "clean": "rimraf out coverage .vscode-test",
    "reset": "pnpm run clean && pnpm install",
    "build": "pnpm run compile",
    "package": "vsce package",
    "dev": "pnpm run watch"
  },
  "dependencies": {
    "axios": "^1.7.7",
    "highlight.js": "^11.10.0",
    "marked": "^14.1.3",
    "ws": "^8.18.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.1",
    "@commitlint/config-conventional": "^19.8.1",
    "@istanbuljs/nyc-config-typescript": "^1.0.2",
    "@types/glob": "^8.1.0",
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.100.0",
    "@types/ws": "^8.5.13",
    "@typescript-eslint/eslint-plugin": "^8.31.1",
    "@typescript-eslint/parser": "^8.31.1",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.5.2",
    "bc": "^0.1.1",
    "esbuild": "^0.25.5",
    "eslint": "^9.25.1",
    "glob": "^11.0.2",
    "mocha": "^11.5.0",
    "nodemon": "^3.1.10",
    "nyc": "^17.1.0",
    "prettier": "^3.5.3",
    "rimraf": "^6.0.1",
    "typescript": "^5.8.3"
  }
}
